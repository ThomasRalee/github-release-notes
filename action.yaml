name: "Generate GitHub Release Notes"
description: "Generate GitHub release notes from git commits"

inputs:
  previous_tag:
    description: "The previous tag to compare against"
    required: true
  repo_url:
    description: "The URL of the repository"
    required: true

runs:
  using: "composite"
  steps:
    # - name: Set Up Variables
    #   shell: bash
    #   run: |
    #     echo "PREVIOUS_TAG=${{ inputs.previous_tag }}" >> $GITHUB_ENV
    #     echo "REPO_URL=${{ inputs.repo_url }}" >> $GITHUB_ENV

    - name: Increment version
      id: increment_version
      shell: bash
      run: |
        # Split the version into major, minor, patch components
        IFS='.' read -r major minor patch <<< "${{ inputs.previous_tag }}"
        # Increment the patch number
        patch=$((patch + 1))
        new_version="$major.$minor.$patch"
        echo "new_version=${new_version}" >> $GITHUB_OUTPUT

    - name: Generate Release Notes
      id: generate_notes
      shell: bash
      run: |
        previous_tag="${{ inputs.previous_tag }}"
        repo_url="${{ inputs.repo_url }}"

        # Fetch all commits for processing
        all_commits=$(git log "$previous_tag"..HEAD --pretty=format:"%h|%p|%s|%an|%ae")
        formatted_notes=""
        pr_commits=()

        # Process the commit data to capture PR-related commits
        while IFS='|' read -r commit_hash parent_hashes commit_message commit_author commit_email; do
          # If this is a merge commit, extract PR number and parent hashes
          if echo "$commit_message" | grep -q "Merge pull request"; then
            pr_number=$(echo "$commit_message" | grep -oE "#[0-9]+")
            pr_link="[${pr_number}](${repo_url}/pull/${pr_number:1})"

            # Extract the parent hashes
            read -r start_commit end_commit <<< "$parent_hashes"

            # Start tracking commits for this PR
            should_track=false
            while IFS='|' read -r inner_commit_hash inner_rest; do
              # Start tracking when we hit the end_commit
              if [[ "$inner_commit_hash" == "$end_commit" ]]; then
                should_track=true
              fi

              # Stop tracking when we reach the starting commit
              if [[ "$inner_commit_hash" == "$start_commit" ]]; then
                break
              fi

              # If we are tracking, add the commit to the PR commits array
              if [ "$should_track" = true ]; then
                pr_commits+=("$inner_commit_hash")
              fi
            done <<< "$all_commits"
          fi
        done <<< "$all_commits"

        # Generate output for each commit
        while IFS='|' read -r commit_hash _ commit_message commit_author commit_email; do
          github_author_link="@${commit_author}"

          # Append the PR link if the commit is part of the PR-related commits
          if [[ " ${pr_commits[@]} " =~ " ${commit_hash} " ]]; then
            formatted_notes="${formatted_notes}\n- ${commit_hash:0:7} - ${commit_message} by ${github_author_link} in ${pr_link}"
          else
            formatted_notes="${formatted_notes}\n- ${commit_hash:0:7} - ${commit_message} by ${github_author_link}"
          fi
        done <<< "$all_commits"

        # Export the formatted notes to the GitHub environment
        echo "release_notes<<EOF" >> $GITHUB_ENV
        echo -e "$formatted_notes" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo -e release_notes=${formatted_notes} >> $GITHUB_OUTPUT

outputs:
  new_version:
    description: "Incremented github tag number"
    value: ${{ steps.increment_version.outputs.new_version }}
  release_notes:
    description: "Incremented github tag number"
    value: ${{ steps.generate_notes.outputs.release_notes }}
