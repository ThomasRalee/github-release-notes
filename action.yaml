name: "Generate GitHub Release Notes"
description: "Generate GitHub release notes from git commits"

inputs:
  previous_tag:
    description: "The previous tag to compare against"
    required: true
  repo_url:
    description: "The URL of the repository"
    required: true

outputs:
  new_version:
    description: "Incremented github tag number"
    value: ${{ steps.increment_version.outputs.new_version }}
  release_notes:
    description: "Incremented github tag number"
    value: "${{ steps.generate_notes.outputs.release_notes }}"
  bugsnag_version:
    description: "The app version to use for Bugsnag"
    value: ${{ steps.compute_bugsnag_app_version.outputs.app_version }}

runs:
  using: "composite"
  steps:
    - name: Increment version
      id: increment_version
      shell: bash
      run: |
        # Split the version into major, minor, patch components
        IFS='.' read -r major minor patch <<< "${{ inputs.previous_tag }}"
        # Increment the patch number
        patch=$((patch + 1))
        new_version="$major.$minor.$patch"
        echo "new_version=${new_version}" >> $GITHUB_ENV
        echo "new_version=${new_version}" >> $GITHUB_OUTPUT

    - name: Generate Release Notes
      id: generate_notes
      shell: bash
      run: |
        previous_tag="${{ inputs.previous_tag }}"
        repo_url="${{ inputs.repo_url }}"

        # Fetch all commits for processing
        pr_commits=()
        formatted_notes=""
        first_merge_commit_skipped=false
        all_commits=$(git log "$previous_tag"..HEAD --pretty=format:"%h|%p|%s|%an|%ae")

        # Check if there are no commits
        if [[ -z "$all_commits" || "$all_commits" =~ ^[[:space:]]*$ ]]; then
          echo "No commits found between ${previous_tag} and HEAD."
          formatted_notes="No new commits"
        else
          # Process the commit data to capture PR-related commits
          while IFS='|' read -r commit_hash parent_hashes commit_message commit_author commit_email; do
            # Check for "Merge pull request" in commit message
            if echo "$commit_message" | grep -q "Merge pull request"; then
              # Skip the first "Merge pull request" commit
              if [ "$first_merge_commit_skipped" = false ]; then
                first_merge_commit_skipped=true
                continue
              fi

              pr_number=$(echo "$commit_message" | grep -oE "#[0-9]+")
              pr_link="[${pr_number}](${repo_url}/pull/${pr_number:1})"

              # Extract the parent hashes
              read -r start_commit end_commit <<< "$parent_hashes"

              # Track commits related to this PR
              should_track=false
              while IFS='|' read -r inner_commit_hash inner_rest; do
                # Start tracking from the end_commit
                if [[ "$inner_commit_hash" == "$end_commit" ]]; then
                  should_track=true
                fi

                # Stop tracking at the start_commit
                if [[ "$inner_commit_hash" == "$start_commit" ]]; then
                  break
                fi

                # If tracking, add commit to PR-related array
                if [ "$should_track" = true ]; then
                  pr_commits+=("$inner_commit_hash")
                fi
              done <<< "$all_commits"
            fi
          done <<< "$all_commits"

          # Generate output for each commit
          while IFS='|' read -r commit_hash _ commit_message commit_author commit_email; do
            if [[ "$commit_author" =~ \  ]]; then
                github_author="${commit_author} (${commit_email})"
            else
                github_author="@${commit_author}"
            fi

            # Append the PR link if the commit is part of the PR-related commits
            if [[ "$commit_message" == *"Merge pull request"* ]]; then
                formatted_notes="${formatted_notes}"
            elif [[ " ${pr_commits[@]} " =~ " ${commit_hash} " ]]; then
              formatted_notes="${formatted_notes}\n- ${commit_hash:0:7} - ${commit_message} by ${github_author} in ${pr_link}"
            else
              formatted_notes="${formatted_notes}\n- ${commit_hash:0:7} - ${commit_message} by ${github_author}"
            fi
          done <<< "$all_commits"
        fi

        if [[ -z "$formatted_notes" ]]; then
          formatted_notes="No commits"
        fi

        # Export the formatted notes to the GitHub environment
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo -e "${formatted_notes}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Compute Bugsnag App Version
      id: compute_bugsnag_app_version
      shell: bash
      run: |
        # Assign new_version from earlier step output to a shell variable
        new_version="${{ steps.increment_version.outputs.new_version }}"
        release_notes="${{ steps.generate_notes.outputs.release_notes }}"

        # Initialize app_version with new_version
        app_version="$new_version"

        # Conditional assignment based on release_notes output
        if [[ "$release_notes" == "No new commits" ]]; then
          app_version="${{ inputs.previous_tag }}"
        fi

        # Set the app_version as an output
        echo "app_version=$app_version" >> $GITHUB_OUTPUT

        # Log for debug purposes
        echo "Release notes: $release_notes"
        echo "Bugsnag version: $app_version"
